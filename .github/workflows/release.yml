name: Release
on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: "Which environment are you using?"
        required: true
        default: "development"
        options:
          - development
          - staging
          - production

# Declare default permissions as readonly.
permissions: read-all

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.sha_short_step.outputs.sha_short }}
      version: ${{ steps.version_step.outputs.version }}
      version_short: ${{ steps.version_step.outputs.version_short }}
      build_number: ${{ steps.version_step.outputs.build_number }}
    steps:
      - uses: actions/checkout@v4

      - name: Set sha_short
        id: sha_short_step
        run: echo "sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: Check sha_short
        run: echo ${{ steps.sha_short_step.outputs.sha_short }}

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            brew install yq
          fi
          yq --version

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' pubspec.yaml)
          echo "$VERSION"

          VERSION_SHORT=$(echo "$VERSION" | sed -e "s/+.*//")
          echo "$VERSION_SHORT"

          BUILD_NUMBER=$(echo "$VERSION" | sed -e "s/.*+//")
          echo "$BUILD_NUMBER"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_short=$VERSION_SHORT" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Check version
        run: |
          echo "version: $VERSION"
          echo "version_short: $VERSION_SHORT"
          echo "build_number: $BUILD_NUMBER"
        env:
          VERSION: ${{ steps.version_step.outputs.version }}
          VERSION_SHORT: ${{ steps.version_step.outputs.version_short }}
          BUILD_NUMBER: ${{ steps.version_step.outputs.build_number }}

      - name: Install gh
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not exists"
            brew install gh
          fi
          gh --version

      - name: Create a release
        run: |
          RELEASE_NOTES="Env: $ENV <br /> Branch: $BRANCH <br /> Commit: $COMMIT_REF"
          if [ "$ENV" == "production" ]; then
            gh release create "$TAG_NAME" --latest --title "$TAG_NAME" --notes "$RELEASE_NOTES"
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release create "$RELEASE" --prerelease --title "$RELEASE" --notes "$RELEASE_NOTES"
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          BRANCH: ${{ github.ref_name }}
          COMMIT_REF: ${{ steps.sha_short_step.outputs.sha_short }}
          TAG_NAME: "v${{ steps.version_step.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

  gen_shasum:
    name: Gen Shasum
    runs-on: ubuntu-latest
    needs:
      - create_release
      - internal_apk
      - internal_aab
      - internal_ios
      - external_apk
      - external_aab
      - external_ios
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install ts-shasum
        run: pnpm add --global ts-shasum

      - name: Download assets
        uses: robinraju/release-downloader@v1
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        with:
          tag: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.commit_count }}${{ github.event.inputs.env == 'development' && '.dev' || '.stg' }}"
          fileName: '*'
          tarBall: true
          zipBall: true
          out-file-path: 'pigeon-downloads'

      - name: Download assets
        uses: robinraju/release-downloader@v1
        if: github.event.inputs.env == 'production'
        with:
          tag: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.commit_count }}"
          fileName: '*'
          tarBall: true
          zipBall: true
          out-file-path: 'pigeon-downloads'
      
      - name: Gen SHASUMS256.txt
        run: shasum create "$GITHUB_WORKSPACE/SHASUMS256.txt" *
        working-directory: ${{ github.workspace }}/pigeon-downloads

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          if [ "$ENV" == "production" ]; then
            gh release upload "$TAG_NAME" ./SHASUMS256.txt
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release upload "$RELEASE" ./SHASUMS256.txt
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

  # remove_release:
  #     name: Remove release
  #     if: ${{ cancelled() || failure() }}
  #     runs-on: ubuntu-latest
  #     needs:
  #       - create_release
  #       - internal_apk
  #       - internal_aab
  #       - internal_ios
  #       - external_apk
  #       - external_aab
  #       - external_ios
  #     steps:
  #       - uses: actions/checkout@v4

  #       - name: Install gh
  #         run: |
  #           if ! command -v gh >/dev/null 2>&1; then
  #             echo "gh not exists"
  #             brew install gh
  #           fi
  #           gh --version

  #       - name: Remove a release
  #         run: |
  #           if [ "$ENV" == "production" ]; then
  #             gh release delete -y --cleanup-tag "$TAG_NAME"
  #           else
  #             RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
  #             gh release delete -y --cleanup-tag "$RELEASE"
  #           fi
  #         env:
  #           ENV: ${{ github.event.inputs.env }}
  #           TAG_NAME: "v${{ needs.create_release.outputs.version }}"
  #           GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

  internal_apk:
    name: Create apk (internal)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.2'

      - name: Configure .env for development
        if: github.event.inputs.env == 'development'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.DEV_INTERNAL_ENV_KEY }}

      - name: Configure .env for staging
        if: github.event.inputs.env == 'staging'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.STG_INTERNAL_ENV_KEY }}

      - name: Configure .env for production
        if: github.event.inputs.env == 'production'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.PROD_INTERNAL_ENV_KEY }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID" | base64 --decode > app/src/external/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID: ${{ secrets.FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID }}
        working-directory: android

      # Build the application.
      - name: Build apk
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: flutter build apk --no-tree-shake-icons --dart-define-from-file=.env --flavor internalStaging --target lib/main_internal.dart

      - name: Build apk
        if: github.event.inputs.env == 'production'
        run: flutter build apk --no-tree-shake-icons --dart-define-from-file=.env --flavor internalProduction --target lib/main_internal.dart

      # Package the build.
      - name: Copy build for Android
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: |
          ls -la
          cp *.apk $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/apk/internalStaging/release

      - name: Copy build for Android
        if: github.event.inputs.env == 'production'
        run: |
          ls -la
          cp *.apk $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/apk/internalProduction/release

      - name: Install gh
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not exists"
            brew install gh
          fi
          gh --version

      - name: Upload assets
        run: |
          if [ "$ENV" == "production" ]; then
            gh release upload "$TAG_NAME" ./*.apk
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release upload "$RELEASE" ./*.apk
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/src/external/google-services.json
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  external_apk:
    name: Create apk (external)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.2'

      - name: Configure .env for development
        if: github.event.inputs.env == 'development'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.DEV_EXTERNAL_ENV_KEY }}

      - name: Configure .env for staging
        if: github.event.inputs.env == 'staging'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.STG_EXTERNAL_ENV_KEY }}

      - name: Configure .env for production
        if: github.event.inputs.env == 'production'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.PROD_EXTERNAL_ENV_KEY }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID" | base64 --decode > app/src/external/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID: ${{ secrets.FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID }}
        working-directory: android

      # Build the application.
      - name: Build apk
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: flutter build apk --no-tree-shake-icons --dart-define-from-file=.env --flavor externalStaging --target lib/main_external.dart

      - name: Build apk
        if: github.event.inputs.env == 'production'
        run: flutter build apk --no-tree-shake-icons --dart-define-from-file=.env --flavor externalProduction --target lib/main_external.dart

      # Package the build.
      - name: Copy build for Android
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: |
          ls -la
          cp *.apk $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/apk/externalStaging/release

      - name: Copy build for Android
        if: github.event.inputs.env == 'production'
        run: |
          ls -la
          cp *.apk $GITHUB_WORKSPACE/
        working-directory: build/app/outputs/apk/externalProduction/release

      - name: Install gh
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not exists"
            brew install gh
          fi
          gh --version

      - name: Upload assets
        run: |
          if [ "$ENV" == "production" ]; then
            gh release upload "$TAG_NAME" ./*.apk
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release upload "$RELEASE" ./*.apk
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

#      - name: Install firebase cli
#        run: |
#          if ! command -v firebase >/dev/null 2>&1; then
#            echo "firebase not exists"
#            curl -sL https://firebase.tools | bash
#          fi
#          firebase --version
#
#      - name: Upload firebase app distribution
#        run: |
#          APP_BUNDLE_NAME="$([[ "$ENV" == "development" || "$ENV" == "staging" ]] && echo "app-externalstaging-release.apk" || echo "app-externalproduction-release.apk")"
#          ANDROID_APP_ID="$([[ "$ENV" == "development" || "$ENV" == "staging" ]] && echo "$FIREBASE_ANDROID_APP_ID_DEV" || echo "$FIREBASE_ANDROID_APP_ID")"
#          ANDROID_GROUPS="$([[ "$ENV" == "development" || "$ENV" == "staging" ]] && echo "$FIREBASE_ANDROID_GROUPS_DEV" || echo "$FIREBASE_ANDROID_GROUPS")"
#          firebase appdistribution:distribute "$APP_BUNDLE_NAME"  \
#            --app "$ANDROID_APP_ID"  \
#            --release-notes "env: $ENV" --groups "$ANDROID_GROUPS"
#        env:
#          ENV: ${{ github.event.inputs.env }}
#          FIREBASE_ANDROID_APP_ID_DEV: ${{ secrets.FIREBASE_ANDROID_APP_ID_DEV }}
#          FIREBASE_ANDROID_APP_ID: ${{ secrets.FIREBASE_ANDROID_APP_ID }}
#          FIREBASE_ANDROID_GROUPS_DEV: ${{ secrets.FIREBASE_ANDROID_GROUPS_DEV }}
#          FIREBASE_ANDROID_GROUPS: ${{ secrets.FIREBASE_ANDROID_GROUPS }}
#          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#        working-directory: build/app/outputs/flutter-apk

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/src/external/google-services.json
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  internal_aab:
    name: Create appbundle (internal)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.2'

      - name: Configure .env for development
        if: github.event.inputs.env == 'development'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.DEV_INTERNAL_ENV_KEY }}

      - name: Configure .env for staging
        if: github.event.inputs.env == 'staging'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.STG_INTERNAL_ENV_KEY }}

      - name: Configure .env for production
        if: github.event.inputs.env == 'production'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.PROD_INTERNAL_ENV_KEY }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID" | base64 --decode > app/src/external/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID: ${{ secrets.FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID }}
        working-directory: android

      # Build the application.
      - name: Build appbundle
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: flutter build appbundle --no-tree-shake-icons --dart-define-from-file=.env --flavor internalStaging --target lib/main_internal.dart

      - name: Build appbundle
        if: github.event.inputs.env == 'production'
        run: flutter build appbundle --no-tree-shake-icons --dart-define-from-file=.env --flavor internalProduction --target lib/main_internal.dart

      # Package the build.
      - name: Copy build for Android
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: cp *.aab $GITHUB_WORKSPACE/Pigeon-internal.aab
        working-directory: build/app/outputs/bundle/internalStagingRelease

      - name: Copy build for Android
        if: github.event.inputs.env == 'production'
        run: cp *.aab $GITHUB_WORKSPACE/Pigeon-internal.aab
        working-directory: build/app/outputs/bundle/internalProductionRelease

      - name: Install gh
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not exists"
            brew install gh
          fi
          gh --version

      - name: Upload assets
        run: |
          if [ "$ENV" == "production" ]; then
            gh release upload "$TAG_NAME" ./*.aab
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release upload "$RELEASE" ./*.aab
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/src/external/google-services.json
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  external_aab:
    name: Create appbundle (external)
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.2'

      - name: Configure .env for development
        if: github.event.inputs.env == 'development'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.DEV_EXTERNAL_ENV_KEY }}

      - name: Configure .env for staging
        if: github.event.inputs.env == 'staging'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.STG_EXTERNAL_ENV_KEY }}

      - name: Configure .env for production
        if: github.event.inputs.env == 'production'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.PROD_EXTERNAL_ENV_KEY }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID" | base64 --decode > app/src/external/google-services.json
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
          FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID: ${{ secrets.FIREBASE_GOOGLE_SERVICE_BASE64_ANDROID }}
        working-directory: android

      # Build the application.
      - name: Build appbundle
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: flutter build appbundle --no-tree-shake-icons --dart-define-from-file=.env --flavor externalStaging --target lib/main_external.dart

      - name: Build appbundle
        if: github.event.inputs.env == 'production'
        run: flutter build appbundle --no-tree-shake-icons --dart-define-from-file=.env --flavor externalProduction --target lib/main_external.dart

      # Package the build.
      - name: Copy build for Android
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: cp *.aab $GITHUB_WORKSPACE/Pigeon-external.aab
        working-directory: build/app/outputs/bundle/externalStagingRelease

      - name: Copy build for Android
        if: github.event.inputs.env == 'production'
        run: cp *.aab $GITHUB_WORKSPACE/Pigeon-external.aab
        working-directory: build/app/outputs/bundle/externalProductionRelease

      - name: Install gh
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not exists"
            brew install gh
          fi
          gh --version

      - name: Upload assets
        run: |
          if [ "$ENV" == "production" ]; then
            gh release upload "$TAG_NAME" ./*.aab
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release upload "$RELEASE" ./*.aab
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/src/external/google-services.json
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties
          rm -f .env

  internal_ios:
    name: Create ios (internal)
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.2'

      - name: Configure .env for development
        if: github.event.inputs.env == 'development'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.DEV_INTERNAL_ENV_KEY }}

      - name: Configure .env for staging
        if: github.event.inputs.env == 'staging'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.STG_INTERNAL_ENV_KEY }}

      - name: Configure .env for production
        if: github.event.inputs.env == 'production'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.PROD_INTERNAL_ENV_KEY }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving ios dependencies
        run: cd ios && pod install --repo-update && cd ..

      - name: Install the Apple certificate and provisioning profile
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_DEV_BASE64: ${{ secrets.CERT_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          INTERNAL_PROVISION_PROFILE_BASE64: ${{ secrets.INTERNAL_PROVISION_PROFILE_BASE64 }}
          INTERNAL_PROVISION_PROFILE_DEV_BASE64: ${{ secrets.INTERNAL_PROVISION_PROFILE_DEV_BASE64 }}
          EXTERNAL_PROVISION_PROFILE_BASE64: ${{ secrets.EXTERNAL_PROVISION_PROFILE_BASE64 }}
          EXTERNAL_PROVISION_PROFILE_DEV_BASE64: ${{ secrets.EXTERNAL_PROVISION_PROFILE_DEV_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERT_PATH=$RUNNER_TEMP/ios_distribution.cer
          CERT_DEV_PATH=$RUNNER_TEMP/development.cer
          INTERNAL_PP_PATH=$RUNNER_TEMP/homing_pigeon_internal_appstore.mobileprovision
          INTERNAL_PP_DEV_PATH=$RUNNER_TEMP/homing_pigeon_internal_dev.mobileprovision
          EXTERNAL_PP_PATH=$RUNNER_TEMP/homing_pigeon_appstore.mobileprovision
          EXTERNAL_PP_DEV_PATH=$RUNNER_TEMP/homing_pigeon_dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/hp-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$CERT_BASE64" | base64 --decode --output $CERT_PATH
          echo -n "$CERT_DEV_BASE64" | base64 --decode --output $CERT_DEV_PATH
          echo -n "$INTERNAL_PROVISION_PROFILE_BASE64" | base64 --decode --output $INTERNAL_PP_PATH
          echo -n "$INTERNAL_PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $INTERNAL_PP_DEV_PATH
          echo -n "$EXTERNAL_PROVISION_PROFILE_BASE64" | base64 --decode --output $EXTERNAL_PP_PATH
          echo -n "$EXTERNAL_PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $EXTERNAL_PP_DEV_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERT_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security import $CERT_DEV_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $INTERNAL_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $INTERNAL_PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $EXTERNAL_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $EXTERNAL_PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Configure Firebase
        run: |
          echo "$FIREBASE_GOOGLE_SERVICE_BASE64_IOS" | base64 --decode > Runner/GoogleService-Info.plist
        env:
          FIREBASE_GOOGLE_SERVICE_BASE64_IOS: ${{ secrets.FIREBASE_GOOGLE_SERVICE_BASE64_IOS }}
        working-directory: ios

      - name: Build ipa
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to adhoc..."
          flutter build ipa --dart-define-from-file=.env --flavor internal --target lib/main_internal.dart --export-options-plist=ios/ExportOptions/internal/debug.plist

      - name: Build ipa
        if: github.event.inputs.env == 'production'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build ipa --dart-define-from-file=.env --flavor internal --target lib/main_internal.dart --export-options-plist=ios/ExportOptions/internal/release.plist

      # Package the build.
      - name: Copy build for iOS
        run: cp *.ipa $GITHUB_WORKSPACE/Pigeon-internal.ipa
        working-directory: build/ios/ipa

      - name: Install gh
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not exists"
            brew install gh
          fi
          gh --version

      - name: Upload assets
        run: |
          if [ "$ENV" == "production" ]; then
            gh release upload "$TAG_NAME" ./*.ipa
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release upload "$RELEASE" ./*.ipa
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/hp-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/hp-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/hp-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/homing_pigeon_*.mobileprovision
          rm -f ios/Runner/GoogleService-Info.plist
          rm -f .env

  external_ios:
    name: Create ios (external)
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.24.2'

      - name: Configure .env for development
        if: github.event.inputs.env == 'development'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.DEV_EXTERNAL_ENV_KEY }}

      - name: Configure .env for staging
        if: github.event.inputs.env == 'staging'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.STG_EXTERNAL_ENV_KEY }}

      - name: Configure .env for production
        if: github.event.inputs.env == 'production'
        run: |
          echo "$ENV_KEY" | base64 --decode > .env
        env:
          ENV_KEY: ${{ secrets.PROD_EXTERNAL_ENV_KEY }}

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving ios dependencies
        run: cd ios && pod install --repo-update && cd ..

      - name: Install the Apple certificate and provisioning profile
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_DEV_BASE64: ${{ secrets.CERT_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          INTERNAL_PROVISION_PROFILE_BASE64: ${{ secrets.INTERNAL_PROVISION_PROFILE_BASE64 }}
          INTERNAL_PROVISION_PROFILE_DEV_BASE64: ${{ secrets.INTERNAL_PROVISION_PROFILE_DEV_BASE64 }}
          EXTERNAL_PROVISION_PROFILE_BASE64: ${{ secrets.EXTERNAL_PROVISION_PROFILE_BASE64 }}
          EXTERNAL_PROVISION_PROFILE_DEV_BASE64: ${{ secrets.EXTERNAL_PROVISION_PROFILE_DEV_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERT_PATH=$RUNNER_TEMP/ios_distribution.cer
          CERT_DEV_PATH=$RUNNER_TEMP/development.cer
          INTERNAL_PP_PATH=$RUNNER_TEMP/homing_pigeon_internal_appstore.mobileprovision
          INTERNAL_PP_DEV_PATH=$RUNNER_TEMP/homing_pigeon_internal_dev.mobileprovision
          EXTERNAL_PP_PATH=$RUNNER_TEMP/homing_pigeon_appstore.mobileprovision
          EXTERNAL_PP_DEV_PATH=$RUNNER_TEMP/homing_pigeon_dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/hp-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$CERT_BASE64" | base64 --decode --output $CERT_PATH
          echo -n "$CERT_DEV_BASE64" | base64 --decode --output $CERT_DEV_PATH
          echo -n "$INTERNAL_PROVISION_PROFILE_BASE64" | base64 --decode --output $INTERNAL_PP_PATH
          echo -n "$INTERNAL_PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $INTERNAL_PP_DEV_PATH
          echo -n "$EXTERNAL_PROVISION_PROFILE_BASE64" | base64 --decode --output $EXTERNAL_PP_PATH
          echo -n "$EXTERNAL_PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $EXTERNAL_PP_DEV_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERT_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security import $CERT_DEV_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $INTERNAL_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $INTERNAL_PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $EXTERNAL_PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $EXTERNAL_PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Configure Firebase
        run: |
          echo "$FIREBASE_GOOGLE_SERVICE_BASE64_IOS" | base64 --decode > Runner/GoogleService-Info.plist
        env:
          FIREBASE_GOOGLE_SERVICE_BASE64_IOS: ${{ secrets.FIREBASE_GOOGLE_SERVICE_BASE64_IOS }}
        working-directory: ios

      - name: Build ipa
        if: ${{ github.event.inputs.env == 'development' || github.event.inputs.env == 'staging' }}
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to adhoc..."
          flutter build ipa --dart-define-from-file=.env --flavor external --target lib/main_external.dart --export-options-plist=ios/ExportOptions/external/debug.plist

      - name: Build ipa
        if: github.event.inputs.env == 'production'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build ipa --dart-define-from-file=.env --flavor external --target lib/main_external.dart --export-options-plist=ios/ExportOptions/external/release.plist

      # Package the build.
      - name: Copy build for iOS
        run: cp *.ipa $GITHUB_WORKSPACE/Pigeon-external.ipa
        working-directory: build/ios/ipa

      - name: Install gh
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            echo "gh not exists"
            brew install gh
          fi
          gh --version

      - name: Upload assets
        run: |
          if [ "$ENV" == "production" ]; then
            gh release upload "$TAG_NAME" ./*.ipa
          else
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$TAG_NAME.dev" || echo "$TAG_NAME.stg")"
            gh release upload "$RELEASE" ./*.ipa
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          TAG_NAME: "v${{ needs.create_release.outputs.version }}"
          GH_TOKEN: ${{ secrets.CYF_RELEASE_TOKEN }}

#      - name: Install firebase cli
#        run: |
#          if ! command -v firebase >/dev/null 2>&1; then
#            echo "firebase not exists"
#            curl -sL https://firebase.tools | bash
#          fi
#          firebase --version
#
#      - name: Upload firebase app distribution
#        run: |
#          IOS_GROUPS="$([[ "$ENV" == "development" || "$ENV" == "staging" ]] && echo "$FIREBASE_IOS_GROUPS_DEV" || echo "$FIREBASE_IOS_GROUPS")"
#          firebase appdistribution:distribute Homing\ Pigeon.ipa  \
#            --app "$FIREBASE_IOS_APP_ID"  \
#            --release-notes "env: $ENV" --groups "$IOS_GROUPS"
#        env:
#          ENV: ${{ github.event.inputs.env }}
#          FIREBASE_IOS_APP_ID: ${{ secrets.FIREBASE_IOS_APP_ID }}
#          FIREBASE_IOS_GROUPS_DEV: ${{ secrets.FIREBASE_IOS_GROUPS_DEV }}
#          FIREBASE_IOS_GROUPS: ${{ secrets.FIREBASE_IOS_GROUPS }}
#          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#        working-directory: build/ios/ipa

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/hp-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/hp-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/hp-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/homing_pigeon_*.mobileprovision
          rm -f ios/Runner/GoogleService-Info.plist
          rm -f .env
